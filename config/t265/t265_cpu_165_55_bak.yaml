%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2




is_fisheye: 1
imu_topic: "/camera/imu"
# imu_topic: "/dji_sdk_1/dji_sdk/imu"
image0_topic: "/camera/fisheye1/image_raw"
image1_topic: "/camera/fisheye2/image_raw"
output_path: "~/output"

depth_config: "depth_cpu.yaml"
cam0_calib: "up.yaml"
cam1_calib: "down.yaml"
image_width: 200 # 250 # 200 # 400 # 500 # 200 # 300 # 400 # 500 # 200 # 500 # 500 # 500 #848 # For fisheye, this indicate the flattened image width; min 100; 300 - 500 is good for vins
image_height: 200 # 800
show_width: 400 # 800 # 400 # 800 # 400 # 800 # 600 # 800 #600 # 800 # 600 # 800 # 1080   # 600


#######
#cube_map: 0
#use_new: 0
#fisheye_fov: 235  #165 #235 #280 # 235 # 250 # 235 # 165
#center_fov: 55 # 20 # 55
#show_track: 1           # publish tracking image as topic
#enable_up_top: 1
#enable_down_top: 0
#enable_up_side: 0
#enable_down_side: 0  
#enable_rear_side: 0
#estimate_td: 1
#td: 0.006 # 0.03 #0.0 # 0.014686 #Use mynteye imu
#estimate_extrinsic: 1      # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.





lk_pyr_level: 3 # 5 # 1 # 3
lk_win_size: 21 # 10 # 21
keyframe_longtrack_thres: 50 # 30 # 40 # 20 # 30 # 10 # 70  # 40 # 20 #  30 # 50 # 70 # 100 # 60 # 50 # 40 # 30 # 20

print_log: 0
long_track_ratio: 0.5
debug_image: 1

equalize: 0 # 1 # 0 # 1 # 0

use_line: 1 # 0 # 1 # 0 # 1 # 0 # 1 # 0 # 1 # 0  # 1
image_height_raw: 800
image_width_raw: 848
base_line: -1
show_line: 1
show_disp: 0


line_angle_thres: 0.35 # 0.5 # 0.35 # 1.0 # 0.35 # 1.0 # 0.35 # 0.4 # 0.5
line_pixel_thres: 2.0 # 2.0 # 2.0 # 4.0 # 2.0 # 3.0 # 2.0 # 1.0
use_multi_line_triangulation: 0 # 1 # 0 # 1 # 0 # 1 # 0 # 1 # 0
min_trace_to_marg: 1 # 5 # 1 # 5 # 1 # -1 # -5

########
cube_map: 1
use_new: 1
fisheye_fov_actual: 165 # 160 # 165 
fisheye_fov: 165 # 240 # 300 # 165 # 240 # 165 # 240 # 165 # 240 # 165 # 240 # 162  #165  # 160 # 165  #165 #235 #280 # 235 # 250 # 235 # 165
center_fov: 55 # 80 # 100 # 55 # 80 # 55 # 80 # 55 # 80 # 55 # 80 # 80 #54 # 30 # 80 # 54 # 100 #54 #55 # 100 # 55 # 53.333333333333 #55 # 70 # 100 # 120 # 55 # 20 # 55
show_track: 0         # publish tracking image as topic
enable_up_top: 1
enable_down_top: 1
enable_up_side: 1
enable_down_side: 1
enable_rear_side: 1
estimate_td: 0
td: 0.007 # 0.03 # -0.01 # 0.015 # 0 # 0.007 # -0.020 #0.007 # 0.007 # 0.03 #0.0 # 0.014686 #Use mynteye imu
estimate_extrinsic: 0      # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.


thres_outlier : 3.0 # 5.0 # 3.0 # 10.0 # 3.0 # 10.0 # 3.0 # 10.0 # 3.0 # 15 # 10 # 5 # 3.0
tri_max_err: 5.0 # 3.0 # 2.0 #  5.0 # 2.0 # 12.0 # 2.0 # 5 # 15 # 5.0 # 2.0 # 5.0 # 2.0 # 5.0 # 2.0  # 3.0
# Extrinsic parameter between IMU and Camera.
#estimate_extrinsic: 0      # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ -0.999841656517871,  -0.002527305622882,   0.017614613759287,   0.00033468801254338,
          0.002647659684353,  -0.999973288441411,   0.006812657474643,  -0.00002693807939070,
          0.017596925577957,   0.006858216237442,   0.999821640634091,  -0.00024155187636091,
                   0,                   0,                   0,   1.000000000000000 ]
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ -0.999907219717141,  -0.006279561666090,   0.012087971824032,  -0.06370024375929065,
            0.006316419204771,  -0.999975510987769,   0.003013349163426,   0.00002977363436240,
            0.012068753289649,   0.003089422281414,   0.999922397320912,   0.00030769358213858,
                   0,                   0,                   0,   1.000000000000000 ]




# body_T_cam0: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [1, 0, 0, 0.0392,
#          0, 1, 0, 0.0170,
#          0, 0, 1, 0.0662, 
#          0., 0., 0., 1 ]
# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [1, 0, 0, 0.0392,
#          0, -1, 0, 0.0170,
#          0, 0, -1, -0.0540, 
#          0., 0., 0., 1 ]

#Multiple thread support
multiple_thread: 1
#Gpu accleration support

use_vxworks: 0
use_gpu: 0

enable_depth: 0 # If estimate depth cloud; only available for dual fisheye now
rgb_depth_cloud: 0 # -1: point no texture,  0 depth cloud will be gray, 1 depth cloud will be colored;
#Note that textured and colored depth cloud will slow down whole system

depth_estimate_baseline: 0.05
top_cnt: 10 # 10 # 10 # 10 # 10 # 10 # 10 # 100 # 10 # 100 # 30 # 60 # 120 # 60 # 120 # ss60 # 120 # 60 # 30 # 100 # 30 # 30 # 30 #  30 # 100 # 30   # 50   # 30  # 50  # 10 # 25 # 15 # 30 # 50 # 200 # 50 # 80 # 120 # 200 # 100 # 200 # 80  # 200 # 30
side_cnt: 200 # 30 # 40 # 20 # 200 # 50 # 200 # 200 # 200 # 100 # 200 # 400 # 200 # 400 # 200 # 400 # 200 # 50 # 200 # 200 # 100 # 200 # 100 # 200 # 100 # 150  # 100  # 150 # 70 # 150 #100 # 150 # 300 # 150 # 200 # 300 # 150 # 300 # 150  # 300 # 30
max_solve_cnt: 4000 # 250 # 4000 # 100 # 4000 # 30 # Max Point for solve; highly influence performace

# min_dist: 20            # min distance between two features, this is for GFTT
max_cnt: 150
min_dist: 20 # 20 # 20            # for vworks
freq: 5 # 0 # 5 # 10 # 5 # 0 # 5 # 20 # 10 # 5 # 10   # 10               # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 2.0 # 1 # 2.0        # ransac threshold (pixel)
#show_track: 0           # publish tracking image as topic
show_track_id: 0
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy
enable_perf_output: 0

#optimization parameters
max_solver_time: 0.04 # 0.06 # 0.2 # 0.1 # 0.2 # 0.04 # 0.2 # 0.04 # max solver itration time (ms), to guarantee real time
max_num_iterations: 10 # 16 # 16 # 16 # 12 # 40 # 8 # 30 # 8   # max solver itrations, to guarantee real time
#max_solver_time: 0.06 # 0.06 # 0.1 # s1.0  # max solver itration time (ms), to guarantee real time
#max_num_iterations: 12 # 100   # max solver itrations, to guarantee real time

keyframe_parallax: 50 # 25 # 50 # 80 # 40 # 60 # 100 # 60 # 80 # 100.0 # 90.0 # 100.0 # 80 # 100 # 150 # 30.0 # 100 # 60 #150 # 40 # 20 #40.0  # 40.0 # 40.0  # 20.0   #10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.018515459950627883 #1.8515459950627883e-02          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.0022922235142168084 #2.2922235142168084e-03         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.0006469762442454277 #6.4697624424542766e-04        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.7873368951739148e-05 #2.7873368951739148e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.806549998426918 #9.85         # gravity magnitude

#unsynchronization parameters
# estimate_td: 0                      # online estimate time offset between camera and imu
# td: -0.0736        #-0.0736 when use DJI IMU                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)#
# td: 0.006 # 0.03 #0.0 # 0.014686 #Use mynteye imu
#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/xuhao/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

#rectify
publish_rectify: 0              # whether publish rectified pose
cam0_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]

cam1_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]

